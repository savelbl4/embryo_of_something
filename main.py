import telebot
from telebot import types
from vkwave.bots import SimpleLongPollBot, SimpleBotEvent
from datetime import datetime
from pprint import pprint
import requests
import json
import re
import multiprocessing
import schedule
import time
import random
import os
import psutil
import platform

TG_TOKEN = os.getenv('TG_TOKEN')
VK_TOKEN = os.getenv('VK_TOKEN')
VK_GROUP = os.getenv('VK_GROUP')

tb = telebot.TeleBot(TG_TOKEN)
print(f"The Bot is online (id: {tb.get_me().id})...")
vb = SimpleLongPollBot(tokens=VK_TOKEN, group_id=VK_GROUP)

smile = [
    "üòÄ", "üòÉ", "üòÑ", "üòÅ", "üòÜ", "üòÖ", "üòÇ", "ü§£", "üòä", "üòá", "üôÇ", "üôÉ", "üòâ", "üòå", "üòç", "üòò", "üòó", "üòô",
    "üòö", "üòã", "üòú", "üòù", "üòõ", "ü§ë", "ü§ó", "ü§ì", "üòé", "ü§°", "ü§†", "üòè", "üòí", "üòû", "üòî", "üòü", "üòï", "üôÅ",
    "üò£", "üòñ", "üò´", "üò©", "üò§", "üò†", "üò°", "üò∂", "üòê", "üòë", "üòØ", "üò¶", "üòß", "üòÆ", "üò≤", "üòµ", "üò≥", "üò±",
    "üò®", "üò∞", "üò¢", "üò•", "ü§§", "üò≠", "üòì", "üò™", "üò¥", "üôÑ", "ü§î", "ü§•", "üò¨", "ü§ê", "ü§¢", "ü§ß", "üò∑", "ü§í",
    "ü§ï", "üòà", "üëø", "üëπ", "üë∫", "üí©", "üëª", "üíÄ", "üëΩ", "üëæ", "ü§ñ", "üéÉ", "üò∫", "üò∏", "üòπ", "üòª", "üòº", "üòΩ",
    "üôÄ", "üòø", "üòæ", "üëê", "üôå", "üëè", "üôè", "ü§ù", "üëç", "üëé", "üëä", "‚úä", "ü§õ", "ü§ú", "ü§û", "ü§ò", "üëå", "üëà",
    "üëâ", "üëÜ", "üëá", "‚úã", "ü§ö", "üñê", "üññ", "üëã", "ü§ô", "üí™", "üñï", "ü§≥", "üíÖ", "üíç", "üíÑ", "üíã", "üëÑ", "üëÖ",
    "üëÇ", "üëÉ", "üëÅ", "üëÄ", "üó£", "üë§", "üë•", "üë∂", "üë¶", "üëß", "üë®", "üë©", "üë±", "üë¥", "üëµ", "üë≤", "üë≥", "üë≥",
    "üëÆ", "üë∑", "üíÇ", "üïµ", "ü§∂", "üéÖ", "üë∏", "ü§¥", "üë∞", "ü§µ", "üëº", "ü§∞", "üôá", "üíÅ", "üôÖ", "üôÜ", "üôã", "ü§¶",
    "ü§∑", "üôé", "üíá", "üíÜ", "üï¥", "üíÉ", "üï∫", "üëØ", "üëØ", "üö∂", "üèÉ", "üë≠", "üë¨", "üíë", "üíè", "üë™", "üëö", "üëï",
    "üëñ", "üëî", "üëó", "üëô", "üëò", "üë†", "üë°", "üë¢", "üëû", "üëü", "üëí", "üé©", "üéì", "üëë", "‚õë", "üéí", "üëù", "üëõ",
    "üëú", "üíº", "üëì", "üï∂", "üåÇ"
]

chats = [
    '2501359',
    '6267957',
    '-1001348677218',
]
stickers = [
    'CAACAgIAAxkBAAIYzWh0EYE619Vrw4dwBNk8hTXaaDuBAAK6DwACAsSYSq3W9HdybYh3NgQ',  # start
    'CAACAgIAAxkBAAIYdGh0EDnwYybZuj2qc2qamxRKQExDAAJOAAMiTA8MNM5spwKVQf42BA',
    'CAACAgIAAxkBAAIS1mJEyRXuHigJTbrBMNuof5BQdMMKAAKEAQACy4gZETK1KP8R8jW1IwQ',
    'CAACAgIAAxkBAAIS1WJEx-fd_sZy3C36hTqNE_NeVr3XAAJIHgAC6VUFGJDLIuAKbjsWIwQ',
    'CAACAgQAAxkBAAEEStdiQL17uUKsMMmyghM9jQdj9LGjmAACAwIAAvAeaiEgvmSCXjXaWSME',
    'CAACAgIAAxkBAAIS12JEyzl6mRRJCtRo_1FS-OaKmgHlAAL_DgACB_GBScLPRvI6stG4IwQ',  # –Ω–µ–∞
    'CAACAgIAAxkBAAIS2GJEy3FKEn2sF9ei9PWay-x6-wPWAAIbCQACGELuCNy5pdXzSq7IIwQ',
    'CAACAgIAAxkBAAIS2WJEy9RFZaz3_yIEZFx7C3CU4GCZAAKZAAPLiBkRnMRwPqB1w3AjBA',
    'CAACAgEAAxkBAAIS2mJEzFzIvAKfPfFZ5KxvAnhuC-dOAAI6AAOhBQwN3srafQKK11kjBA',
    'CAACAgIAAxkBAAITwmhgFZYervsBDFWiAAGcrkOx_nUwVQACbwEAAj0N6AQ5fyi7eC6__zYE',
    'CAACAgIAAxkBAAITumhgD2JJml586mfwZYH4oNZmaNriAAKrAQACEBptIni-vpHMVGzHNgQ',
    'CAACAgIAAxkBAAIT7GhgHy3YeyiN2WSIR5vh6paBJ32RAAImAAN7wH0TtNsrvlEETkI2BA',
]
i = {
    '–ê': '‰∏π', '–ë': 'Áü≥', '–í': '‰πÉ', '–ì': 'ÂéÇ', '–î': '‰∫º', '–ï': '‰ª®', '–Å': '‰ª®', '–ñ': 'Ê∞¥', '–ó': 'Âºì', '–ò': '‰ªà', '–ô': 'ËÆ¢',
    '–ö': 'Èïø', '–õ': '‰∫∫', '–ú': '‰ªé', '–ù': 'ÂçÑ', '–û': 'Âè£', '–ü': 'ÂàÄ', '–†': 'Â∞∏', '–°': 'Âåö', '–¢': '‰∏Ö', '–£': '‰∏´', '–§': '‰∏≠',
    '–•': '‰πÇ', '–¶': 'Âáµ', '–ß': '‰∏©', '–®': 'Â±±', '–©': 'Â±±', '–™': '‰πô', '–´': 'Ëæ∑', '–¨': '‰πô', '–≠': 'ÂΩê', '–Æ': 'Êâ£', '–Ø': 'Áâô'
}


# @bot.message_handler(bot.regex_filter(r'(?i)—Å–ø–∞—Å–∏–±–æ(.*?)'))
# async def my_pleasure(event: SimpleBotEvent):
#     await event.answer(message='–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å &#128521;')


# @bot.message_handler(bot.text_filter(["–ø—Ä–∏–≤–µ—Ç", "–∑–¥–∞—Ä–æ–≤–∞", "—Ö–∞–π"]))
# async def greet(event: SimpleBotEvent):
#     await event.answer('–ü—Ä–∏–≤–µ—Ç!')


@vb.message_handler(vb.regex_filter(r'.*'))
async def greet(event: SimpleBotEvent):
    print(event.text.lower())
    if '—Ç—ã –≥–¥–µ' in event.text.lower():
        await event.answer(im_here())
    if '–ø–µ—Ä–µ–≤–µ–¥–∏' in event.text.lower():
        await event.answer(replace(event.text.lower()))


def lucky():
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Å–º–∞–∏–ª
    return f"{random.choice(smile)}{random.choice(smile)}{random.choice(smile)}"


def replace(string) -> str:
    string = string.replace('–ø–µ—Ä–µ–≤–µ–¥–∏ ', '')
    arr = []
    for name in string:
        if i.get(name.upper()):
            arr.append(i.get(name.upper()))
        else:
            arr.append(name)
    return ''.join(arr)


def get_custom_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('—Å—Ç–∏–∫–µ—Ä'), types.KeyboardButton('–≥–¥–µ'))
    keyboard.row(types.KeyboardButton('–º–Ω–µ –ø–æ–≤–µ–∑—ë—Ç'))
    keyboard.row(types.KeyboardButton('—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'))
    return keyboard


@tb.message_handler(commands=['start'])
def handle_qwe(message):
    chatid = message.chat.id
    # tb.send_message(
    #     chatid,
    #     "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
    #     reply_markup=get_custom_keyboard()
    # )
    tb.send_sticker(
        chatid,
        stickers[0],
        reply_markup=get_custom_keyboard()
    )


@tb.message_handler(func=lambda m: m.text == '—Å—Ç–∏–∫–µ—Ä')
def handle_sticker(message):
    chatid = message.chat.id
    tb.send_sticker(chatid, random.choice(stickers))


@tb.message_handler(func=lambda m: m.text == '–≥–¥–µ')
def handle_gde(message):
    chatid = message.chat.id
    tb.send_message(chatid, im_here())


@tb.message_handler(func=lambda m: m.text == '–º–Ω–µ –ø–æ–≤–µ–∑—ë—Ç')
def handle_gde(message):
    chatid = message.chat.id
    tb.send_message(chatid, lucky())


@tb.message_handler(func=lambda m: True)
def answer(message):
    # pprint(dir(message.from_user))
    # print(message.from_user.full_name)
    chatid = message.chat.id
    print(chatid)
    print(message)
    if message.content_type == 'text' and str(chatid) in chats:
        if '–ø—Ä–∏–≤–µ—Ç –±–æ—Ç' in message.text:
            tb.send_message(chatid, '–ø—Ä–∏–≤–µ—Ç')
        if '–ø–µ—Ä–µ–≤–µ–¥–∏' in message.text.lower():
            tb.send_message(chatid, replace(message.text.lower()))
        if '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' in message.text.lower():
            tb.send_message(chatid, get_server_stats(), parse_mode='Markdown')
        if '—Ñ–µ–¥—è' in message.text.lower():
            if '—Ç—ã –∫–∞–∫' in message.text.lower():
                tb.send_sticker(chatid, random.choice(stickers))
            if '—Ç—ã –≥–¥–µ' in message.text.lower():
                tb.send_message(chatid, im_here())


@tb.message_handler(content_types=['sticker'])
def handle_sticker(message):
    chatid = message.chat.id
    sticker = message.sticker
    stickerid1 = sticker.file_id
    # json_ = message.json
    # stickerid2 = json_.get('sticker').get('file_id')
    print(f"Sticker from {chatid}")
    print(stickerid1)
    if stickerid1 not in stickers:
        stickers.append(stickerid1)
    # print(stickerid2)
    # –ó–¥–µ—Å—å –º–æ–∂–µ—à—å –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å—Ç–∏–∫–µ—Ä, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å
    tb.send_message(chatid, lucky())


def im_here():
    res = requests.request('get', 'https://vk.com/upload.php?act=myip')
    ros = res.text
    pattern = re.compile(r'\d+\.\d+\.\d+\.\d+')
    ip_address = pattern.findall(ros)
    return f'—è —Ç—É—Ç {ip_address[0]}'


def send_weekends():
    day = datetime.isoweekday(datetime.today())
    hour = datetime.now().hour
    if int(day) not in [6, 7]:
        return
    if 9 < int(hour) < 20:
        tb.send_sticker(chats[0], random.choice(stickers))


def send_workdays():
    if datetime.isoweekday(datetime.today()) <= 5:
        tb.send_message(chats[0], text=replace('–∑–≤–µ—Ä–∏ —É–º—Ä—É—Ç'))
        # tb.send_message(chats[2], text='11:11')


def tb_listener():
    try:
        tb.infinity_polling(
            skip_pending=True,
            none_stop=True,
        )
    except:
        print("Lost connection!")


def vb_listener():
    try:
        vb.run_forever()
    except:
        print("Lost connection!")


def sayer():
    # schedule.every(1).to(60).minutes.do(send_weekends)  # —Ö–∑ –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
    # schedule.every().day.at("11:11:11").do(send_workdays)
    schedule.every().day.at("11:11:11").do(send_daily_stats)
    while True:
        schedule.run_pending()
        time.sleep(1)


def get_server_stats():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–µ—Ä–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏"""
    try:
        # CPU
        cpu_usage = psutil.cpu_percent(interval=1)
        cpu_count = psutil.cpu_count()

        # –ü–∞–º—è—Ç—å
        memory = psutil.virtual_memory()
        memory_total = round(memory.total / (1024 ** 3), 2)
        memory_used = round(memory.used / (1024 ** 3), 2)
        memory_percent = memory.percent

        # –î–∏—Å–∫
        disk = psutil.disk_usage('/')
        disk_total = round(disk.total / (1024 ** 3), 2)
        disk_used = round(disk.used / (1024 ** 3), 2)
        disk_percent = disk.percent

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        boot_time = datetime.fromtimestamp(psutil.boot_time())
        uptime = datetime.now() - boot_time

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞*\n\n"
        message += f"üñ•Ô∏è *CPU*: {cpu_usage}% ({cpu_count} —è–¥–µ—Ä)\n"
        message += f"üíæ *–ü–∞–º—è—Ç—å*: {memory_used}GB / {memory_total}GB ({memory_percent}%)\n"
        message += f"üíø *–î–∏—Å–∫*: {disk_used}GB / {disk_total}GB ({disk_percent}%)\n"
        message += f"‚è∞ *–ê–ø—Ç–∞–π–º*: {str(uptime).split('.')[0]}\n"
        message += f"üñ•Ô∏è *–û–°*: {platform.system()} {platform.release()}\n"
        message += f"‚è±Ô∏è *–í—Ä–µ–º—è*: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"

        print(f"–æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç\n {message}")

        return message

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}"


# –î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ /stats
@tb.message_handler(commands=['stats'])
def handle_stats(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    chatid = message.chat.id
    stats_message = get_server_stats()
    print(f"–æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç {chatid}")
    tb.send_message(chatid, stats_message, parse_mode='Markdown')


# –î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ö–ù–û–ü–ö–ò '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
@tb.message_handler(func=lambda m: m.text == '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
def handle_stats_button(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    chatid = message.chat.id
    stats_message = get_server_stats()
    tb.send_message(chatid, stats_message, parse_mode='Markdown')


# –î–û–ë–ê–í–õ–Ø–ï–ú –†–ê–°–ü–ò–°–ê–ù–ò–ï –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –°–¢–ê–¢–ò–°–¢–ò–ö–ò
def send_daily_stats():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        stats_message = get_server_stats()
        try:
            print(f"–æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç {chats[0]}")
            tb.send_message(chats[0], stats_message, parse_mode='Markdown')
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chats[0]}: {e}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


if __name__ == '__main__':
    # tb_listener()
    # vb_listener()
        # search_path = input(
        #             "\n–ø–∏—à–∏, —ë–ø—Ç–µ–ª—å: "
        #         ).strip()
        # print(replace(search_path))

    processes = {
        # 'p1': multiprocessing.Process(target=tb_listener, name='listener1'),
        'p2': multiprocessing.Process(target=vb_listener, name='listener2'),
        'p3': multiprocessing.Process(target=sayer, name='sayer'),
    }
    for process in processes.values():
        process.start()
    time.sleep(1)
    tb_listener()
    # answer = ''
    # while answer != 'stop':
    #     answer = input('').strip()
    #     if answer == 'stop':
    #         for process in processes.values():
    #             print(process)
    #             process.kill()
